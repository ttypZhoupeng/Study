<h1>介绍</h1>
<!-- Vue-js-是什么 -->
<a href="#Vue-js-是什么">
    <h2 id="Vue-js-是什么">
        Vue.js 是什么
    </h2>
</a>
<p>
    Vue.js (读音 /vjuː/，类似于<strong>view</strong>) 是一套构建用户界面的<strong>渐进式框架</strong> 。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue
    的核心库只关注视图层，它不仅易于上手， 还便于与第三方库或既有项目整合。另一方面，当与
    <a href="#">单文件组件</a>和
    <a href="https://github.com/vuejs/awesome-vue#libraries--plugins">生态系统支持的库</a> 结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。
</p>
<p>
    如果你是有经验的前端开发者，想知道 Vue.js 与其它库/框架的区别，查看
    <a href="#">对比其他框架</a>
</p>

<!-- 起步 -->
<a href="#起步">
    <h2 id="起步">
        起步
    </h2>
</a>
<p class="tip">
    官方指南假设你已有 HTML、CSS 和 JavaScript 中级前端知识。如果你刚 开始学习前端开发，将框架作为你的第一步可能不是最好的主意——掌握好基础 知识再来！之前有其他框架的使用经验对于学习 Vue.js 是有帮助的，但这不是必需的。
</p>
<p>
    尝试 Vue.js 最简单的方法是使用
    <a href="https://jsfiddle.net/chrisvfritz/50wL7mdz/" target="_blank">JSFiddle Hello World 例子</a> 。你可以在浏览器新标签页中打开它，跟着例子学习一些基础用法。或者你也可以
    <a href="https://gist.githubusercontent.com/chrisvfritz/7f8d7d63000b48493c336e48b3db3e52/raw/ed60c4e5d5c6fec48b0921edaed0cb60be30e87c/index.html">
        创建一个 
        <code>.html</code>
        文件
    </a>
    <a href="">然后通过如下方式引入 Vue:</a>
    <pre>&lt;script src="https://unpkg.com/vue"&gt;&lt;/script&gt;</pre>
</p>
<p>
    你可以查看
    <a href="#">安装教程</a> 来了解其他安装 Vue 的选项。请注意我们
    <strong>不推荐</strong> 新手直接使用
    <code>Vue-cli</code> ，尤其是对 Node.js 构建工具不够了解的同学。
</p>

<!-- 声明式渲染 -->
<a href="#声明式渲染">
    <h2 id="声明式渲染">
        声明式渲染
    </h2>
</a>
<p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统：</p>
<pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  {{ message }}</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre>
<pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">  <span class="attr">data</span>: {</div><div class="line">    <span class="attr">message</span>: <span class="string">'Hello Vue!'</span></div><div class="line">  }</div><div class="line">})</div></pre>
<p>
    我们已经生成了我们的第一个 Vue 应用！看起来这跟单单渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被绑定在一起，所有的元素都是
    <strong>响应式的</strong> 。我们该如何知道呢？打开你的浏览器的控制台 (就在这个页面打开)，并修改
    <code>app.message</code> ，你将看到上例相应地更新。
</p>
<p>除了文本插值，我们还可以采用这样的方式绑定 DOM 元素属性：</p>
<pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-2"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">"message"</span>&gt;</span></div><div class="line">    鼠标悬停几秒钟查看此处动态绑定的提示信息！</div><div class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre>
<pre><div class="line"><span class="keyword">var</span> app2 = <span class="keyword">new</span> Vue({</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app-2'</span>,</div><div class="line">  <span class="attr">data</span>: {</div><div class="line">    <span class="attr">message</span>: <span class="string">'页面加载于 '</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString()</div><div class="line">  }</div><div class="line">})</div></pre>
<p>这里我们遇到点新东西。你看到的 <code>v-bind</code> 属性被称为<strong>指令</strong>。指令带有前缀 <code>v-</code>，以表示它们是 Vue 提供的特殊属性。可能你已经猜到了，它们会在渲染的
    DOM 上应用特殊的响应式行为。简言之，这里该指令的作用是：“将这个元素节点的 <code>title</code> 属性和 Vue 实例的 <code>message</code> 属性保持一致”。</p>
<p>这里我们遇到点新东西。你看到的 <code>v-bind</code> 属性被称为<strong>指令</strong>。指令带有前缀 <code>v-</code>，以表示它们是 Vue 提供的特殊属性。可能你已经猜到了，它们会在渲染的
    DOM 上应用特殊的响应式行为。简言之，这里该指令的作用是：“将这个元素节点的 <code>title</code> 属性和 Vue 实例的 <code>message</code> 属性保持一致”。</p>

<!-- 条件与循环 -->
<a href="#条件与循环" data-scroll="">
    <h2 id="条件与循环">条件与循环</h2>
</a>
<p>控制切换一个元素的显示也相当简单：</p>
<pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-3"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre>
<pre><div class="line"><span class="keyword">var</span> app3 = <span class="keyword">new</span> Vue({</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app-3'</span>,</div><div class="line">  <span class="attr">data</span>: {</div><div class="line">    <span class="attr">seen</span>: <span class="literal">true</span></div><div class="line">  }</div><div class="line">})</div></pre>
<p>继续在控制台设置 <code>app3.seen = false</code>，你会发现“现在你看到我了”消失了。</p>
<p>这个例子演示了我们不仅可以绑定 DOM 文本到数据，也可以绑定 DOM <strong>结构</strong>到数据。而且，Vue 也提供一个强大的过渡效果系统，可以在 Vue 插入/更新/删除元素时自动应用<a href="transitions.html">过渡效果</a>。</p>
<p>还有其它很多指令，每个都有特殊的功能。例如，<code>v-for</code> 指令可以绑定数组的数据来渲染一个项目列表：</p>
<pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-4"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in todos"</span>&gt;</span></div><div class="line">      {{ todo.text }}</div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre>
<pre><div class="line"><span class="keyword">var</span> app4 = <span class="keyword">new</span> Vue({</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app-4'</span>,</div><div class="line">  <span class="attr">data</span>: {</div><div class="line">    <span class="attr">todos</span>: [</div><div class="line">      { <span class="attr">text</span>: <span class="string">'学习 JavaScript'</span> },</div><div class="line">      { <span class="attr">text</span>: <span class="string">'学习 Vue'</span> },</div><div class="line">      { <span class="attr">text</span>: <span class="string">'整个牛项目'</span> }</div><div class="line">    ]</div><div class="line">  }</div><div class="line">})</div></pre>
<p>在控制台里，输入 <code>app4.todos.push({ text: '新项目' })</code>，你会发现列表中添加了一个新项。</p>

<!-- 处理用户输入 -->
<a href="#处理用户输入" data-scroll="">
    <h2 id="处理用户输入">处理用户输入</h2>
</a>
<p>为了让用户和你的应用进行互动，我们可以用 <code>v-on</code> 指令绑定一个事件监听器，通过它调用我们 Vue 实例中定义的方法：</p>
<pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-5"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ message }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"reverseMessage"</span>&gt;</span>逆转消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre>
<pre><div class="line"><span class="keyword">var</span> app5 = <span class="keyword">new</span> Vue({</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app-5'</span>,</div><div class="line">  <span class="attr">data</span>: {</div><div class="line">    <span class="attr">message</span>: <span class="string">'Hello Vue.js!'</span></div><div class="line">  },</div><div class="line">  <span class="attr">methods</span>: {</div><div class="line">    <span class="attr">reverseMessage</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</div><div class="line">      <span class="keyword">this</span>.message = <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</div><div class="line">    }</div><div class="line">  }</div><div class="line">})</div></pre>
<p>注意在 <code>reverseMessage</code> 方法中，我们更新了应用的状态，但没有触碰 DOM——所有的 DOM 操作都由 Vue 来处理，你编写的代码不需要关注底层逻辑。</p>
<p>Vue 还提供了 <code>v-model</code> 指令，它能轻松实现表单输入和应用状态之间的双向绑定。</p>
<pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-6"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{ message }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre>
<pre><div class="line"><span class="keyword">var</span> app6 = <span class="keyword">new</span> Vue({</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app-6'</span>,</div><div class="line">  <span class="attr">data</span>: {</div><div class="line">    <span class="attr">message</span>: <span class="string">'Hello Vue!'</span></div><div class="line">  }</div><div class="line">})</div></pre>

<!-- 组件化应用与构建 -->
<a href="#组件化应用构建" data-scroll="">
    <h2 id="组件化应用构建">组件化应用构建</h2>
</a>
<p>组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树：</p>
<p><img src="../images/zpimg/components.png" alt="Component Tree"></p>
<p>在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例，在 Vue 中注册组件很简单：</p>
<pre><div class="line"><span class="comment">// 定义名为 todo-item 的新组件 </span></div><div class="line">Vue.component(<span class="string">'todo-item'</span>, {</div><div class="line">  <span class="attr">template</span>: <span class="string">'&lt;li&gt;这是个待办项&lt;/li&gt;'</span></div><div class="line">})</div></pre>
<pre><div class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 创建一个 todo-item 组件的实例 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">todo-item</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div></pre>
<p>但是这样会为每个待办项渲染同样的文本，这看起来并不炫酷，我们应该能将数据从父作用域传到子组件。让我们来修改一下组件的定义，使之能够接受一个<a href="components.html#Props">属性</a>：</p>
<pre><div class="line">Vue.component(<span class="string">'todo-item'</span>, {</div><div class="line">  <span class="comment">// todo-item 组件现在接受一个</span></div><div class="line">  <span class="comment">// "prop"，类似于一个自定义属性</span></div><div class="line">  <span class="comment">// 这个属性名为 todo。</span></div><div class="line">  props: [<span class="string">'todo'</span>],</div><div class="line">  <span class="attr">template</span>: <span class="string">'&lt;li&gt;{{ todo.text }}&lt;/li&gt;'</span></div><div class="line">})</div></pre>
<p>现在，我们可以使用 <code>v-bind</code> 指令将 todo 传到每一个重复的组件中：</p>
<pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-7"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">      现在我们为每个 todo-item 提供 todo 对象</div><div class="line">      todo 对象是变量，即其内容可以是动态的。</div><div class="line">      我们也需要为每个组件提供一个“key”，晚些时候我们会做个解释。</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">todo-item</span></span></div><div class="line">      <span class="attr">v-for</span>=<span class="string">"item in groceryList"</span></div><div class="line">      <span class="attr">v-bind:todo</span>=<span class="string">"item"</span></div><div class="line">      <span class="attr">v-bind:key</span>=<span class="string">"item.id"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre>
<pre><div class="line">Vue.component(<span class="string">'todo-item'</span>, {</div><div class="line">  <span class="attr">props</span>: [<span class="string">'todo'</span>],</div><div class="line">  <span class="attr">template</span>: <span class="string">'&lt;li&gt;{{ todo.text }}&lt;/li&gt;'</span></div><div class="line">})</div><div class="line"></div><div class="line"><span class="keyword">var</span> app7 = <span class="keyword">new</span> Vue({</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app-7'</span>,</div><div class="line">  <span class="attr">data</span>: {</div><div class="line">    <span class="attr">groceryList</span>: [</div><div class="line">      { <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">text</span>: <span class="string">'蔬菜'</span> },</div><div class="line">      { <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'奶酪'</span> },</div><div class="line">      { <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'随便其他什么人吃的东西'</span> }</div><div class="line">    ]</div><div class="line">  }</div><div class="line">})</div></pre>
<p>这只是一个假设的例子，但是我们已经设法将应用分割成了两个更小的单元，子单元通过 <code>props</code> 接口实现了与父单元很好的解耦。我们现在可以进一步为我们的 <code>todo-item</code> 组件实现更复杂的模板和逻辑的改进，而不会影响到父单元。</p>
<p>在一个大型应用中，有必要将整个应用程序划分为组件，以使开发可管理。在<a href="components.html">后续教程</a>中我们将详述组件，不过这里有一个 (假想的) 使用了组件的应用模板是什么样的例子：</p>
<pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">app-nav</span>&gt;</span><span class="tag">&lt;/<span class="name">app-nav</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">app-view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">app-sidebar</span>&gt;</span><span class="tag">&lt;/<span class="name">app-sidebar</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">app-content</span>&gt;</span><span class="tag">&lt;/<span class="name">app-content</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">app-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre>

<!-- 准备好了吗？ -->
<a href="#准备好了吗？" data-scroll=""><h2 id="准备好了吗？">准备好了吗？</h2></a>
<p>我们刚才简单介绍了 Vue 核心最基本的功能——本教程的其余部分将涵盖这些功能以及其他高级功能更详细的细节，所以请务必读完整个教程！</p>
<div class="guide-links">
    <span>← <a href="/v2/guide/installation.html">安装</a></span>
    <span style="float: right;"><a href="/v2/guide/instance.html">Vue 实例</a> →</span>
</div>
<div class="footer">
    发现错误？想参与编辑？
    <a href="https://github.com/vuejs/cn.vuejs.org/blob/master/src/v2/guide/index.md" target="_blank">
        在 Github 上编辑此页！
    </a>
</div>